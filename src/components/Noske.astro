---
import EditionFragment from "./EditionFragment.astro";
import Register from "./Register.astro";
import VirtualKeyboard from "./VirtualKeyboard.astro";
---

<div>
	<div class="flex flex-row">
		<Register />
		<div
			class="xs:flex-col sticky top-24 flex w-[100%] flex-row sm:flex-col md:flex-col lg:flex-col"
		>
			<div class="w-[100%] p-4 text-center">
				<div
					class="xs:max-w-[200px] mx-auto max-w-[1000px] sm:max-w-[300px] md:max-w-[600px] lg:max-w-[800px]"
				>
					<h4 class="pt-2 font-segoe text-xl">
						<img class="inline" src="/Suche.jpg" alt="Suche" /> in den Abacus Transkripten
					</h4>
					<VirtualKeyboard />
					<div id="noske-search" class="text-center"></div>
					<div class="py-4">
						<h5>Beispiele:</h5>
						<ul>
							<li class="inline cursor-pointer px-2">
								1:<a class="hit-examples">"Waitzen=Körnlein"</a>
							</li>
							<li class="inline cursor-pointer px-2">
								2:<a class="hit-examples">"arme" "Seelen"</a>
							</li>
							<li class="inline cursor-pointer px-2">
								3:<a class="hit-examples">"Seele" | "Fegefeuer"</a>
							</li>
						</ul>
						<ul>
							<li class="inline cursor-pointer px-2">
								4:<a class="hit-examples">[w="Feegfeuer"]</a>
							</li>
							<li class="inline cursor-pointer px-2">
								5:<a class="hit-examples">[l="Fegefeuer"]</a>
							</li>
							<li class="inline cursor-pointer px-2">
								6:<a class="hit-examples">[l="ja" &amp; pos="PTKANT"]</a>
							</li>
							<li class="inline px-2"><a href="nutzung" class="text-red-600 underline">mehr</a></li>
						</ul>
					</div>
				</div>

				<div id="hitsbox"></div>
				<div class="mx-auto grid grid-cols-2">
					<div id="noske-pagination" class="text-right"></div>
					<div id="statsbox" class="text-left"></div>
				</div>
			</div>
			<EditionFragment />
		</div>
	</div>
</div>

<style is:global>
	.bg-abacus-search {
		min-width: 130px;
		background-image: url("/ihr_findet_padded.jpg");
		background-position: center;
		background-size: cover;
		background-repeat: no-repeat;
	}

	.kwic.active {
		border-bottom: 1px solid rgb(239 68 68);
	}
</style>
<script>
	import { NoskeSearch } from "acdh-noske-search";
	import { loadContent } from "../lib/synopticView";

	const screeWidth = window.innerWidth >= 1024 ? true : false;

	const search = new NoskeSearch({
		container: "noske-search",
		autocomplete: true,
		wordlistattr: [
			"word",
			"lemma",
			"w",
			"l",
			"pos",
			"id",
			"placeName",
			"placeType",
			"persName",
			"persType",
			"pbId",
			"pbN",
		],
	});

	search.minQueryLength = 2;

	search.search({
		debug: false,
		client: {
			//base: "http://localhost:8080",
			base: "https://abacus-noske.acdh-dev.oeaw.ac.at",
			corpname: "abacus",
			attrs: "word,lemma,w,l,pos,id,placeName,placeType,persName,persType,pbId,pbN",
			structs: "doc,g",
			refs: "doc.title,doc.id",
		},
		hits: {
			id: "hitsbox",
			css: {
				div: "grid grid-cols-1 gap-2 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-1 xs:grid-cols-1",
				table: "table-auto",
				kwic: "text-red-500 text-lg",
				trHead: "bg-gray-200",
			},
		},
		searchInput: {
			id: "noske-input",
			placeholder: "Tippe zumindest zwei Zeichen um Wortvorschläge zu erhalten...",
			button: "Suchen",
			css: {
				button: "text-xl bg-abacus-search text-transparent shadow-lg border border-gray-300 ",
			},
		},
		pagination: {
			id: "noske-pagination",
			css: {
				select: "rounded-lg text-xl p-2",
			},
		},
		stats: {
			id: "statsbox",
			label: "Ergebnisse:",
			css: {
				label: "text-lg text-gray-600 pt-2",
			},
		},
		autocompleteOptions: {
			id: "noske-autocomplete",
			css: {
				div: "bg-white border border-gray-300 absolute ml-[145px] mt-10 text-left overflow-y-scroll overflow-x-hidden max-h-[400px]",
				ul: "p-0",
				li: "p-2 hover:bg-gray-100 text-sm text-gray-500 hover:cursor-pointer",
				loader:
					"m-2 border-4 border-gray-300 border-t-4 border-t-black rounded-full relative w-[40px] h-[40px] text-center",
			},
		},
		config: {
			tableView: false,
			customUrlTransform: screeWidth
				? undefined
				: (lines: { kwic_attr?: string }) => {
						let kwic_attr = lines.kwic_attr?.split("/")[1];
						let pageId = lines.kwic_attr?.split("/")[8];
						// let refs = lines.refs;
						// let docID = refs[0].split("=")[1];
						let url = new URL("https://abacus.acdh-ch-dev.oeaw.ac.at/edition/" + pageId);
						url.hash = kwic_attr!;
						url.searchParams.set("img", "on");
						url.searchParams.set("place", "on");
						return url;
					},
			customResponseHtml: (lines: any, containerId: string, hits: any, client_attrs: any) => {
				const hitsBox = document.getElementById(containerId);

				const attr = lines[0].kwic_attr?.split("/");
				attr!.shift();
				let attr_length = attr!.length / 11;
				let pdIdx = 9;
				let pdNdx = 10;
				if (attr_length > 1) {
					for (let i = 1; i < attr_length; i++) {
						if (attr![pdIdx] !== "" && attr![pdNdx] !== "") {
							pdIdx += 0;
							pdNdx += 0;
						} else {
							pdIdx += 11;
							pdNdx += 11;
						}
					}
				}
				let pdId = attr![pdIdx];
				let pdN = attr![pdNdx];
				let hash = pdId!.split("__")[2];
				loadContent(pdId, "noske-synoptic-view", hash, pdN);

				let issues = {};

				let count = 0;
				for (const line of lines) {
					const hitItem = document.createElement("div");
					hitItem!.classList.add(...["mt-4", "kwic", "cursor-pointer", "text-left", "border-b"]);

					let hitId = line.kwic_attr.split("/")[8];
					// let docTitle = line.refs[1].split("doc.id=")[1];
					// hitId = `line-${count}__${docTitle}__${hitId}`;
					hitItem.id = hitId;

					// let hitCss = hits.css.div.split(" ");
					// hitItem.classList.add(...hitCss);

					const context = document.createElement("div");
					context.classList.add("flex", "items-center");
					context.style.fontSize = "1em";
					context.style.color = "#454545";

					const searchIcon = document.createElement("span");
					searchIcon.style.marginRight = "2em";
					searchIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                </svg>`;
					searchIcon.style.color = "#454545";
					context.appendChild(searchIcon);

					const left = document.createElement("span");
					left.style.color = "#454545";
					let leftKwic = line.left.split(" ").reverse().slice(0, 4).reverse().join(" ");
					left.innerHTML = `...${leftKwic}`;
					context.appendChild(left);

					const kwic = document.createElement("span");
					kwic.style.padding = "0 0.5em";
					let kwicCss = hits.css.kwic.split(" ");
					kwic.classList.add(...kwicCss);
					kwic.classList.add("text-red-600");
					kwic.innerHTML = line.kwic;
					context.appendChild(kwic);

					const right = document.createElement("span");
					right.style.color = "#454545";
					let rightKwic = line.right.split(" ").slice(0, 4).join(" ");
					right.innerHTML = ` ${rightKwic}...`;
					context.appendChild(right);

					hitItem.append(context);

					const issue = document.createElement("div");
					issue.classList.add("flex", "items-center");
					// issue.style.borderBottom = "1px solid #e0e0e0";
					issue.style.padding = "0 0 1em 0";
					issue.style.color = "#454545";

					const issueIcon = document.createElement("span");
					issueIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-file-earmark" viewBox="0 0 16 16">
                                    <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5z"/>
                                    </svg>`;
					issueIcon.style.color = "#454545";
					issueIcon.style.marginRight = "2em";
					issue.appendChild(issueIcon);

					let kwic_attr = line.kwic_attr.split(" ");
					let pageAttr = kwic_attr[0].split("/")[11];

					var facs = line.refs[0].replace("doc.title=", "");
					var issueId = line.refs[1].split("doc.id=")[1];

					issues["Alle"] ? issues["Alle"]++ : (issues["Alle"] = 1);
					issues[issueId] ? issues[issueId]++ : (issues[issueId] = 1);

					try {
						var pageNr: string = pageAttr.replaceAll("_", " ").replace(/[\[\]]/g, "");
					} catch (error) {
						var pageNr = "S. 1";
						console.log("No issue in kwic_attr", issue);
					}

					var page = document.createElement("span");
					page.classList.add(...["page"]);

					try {
						page.innerHTML = `${pageNr} – ${facs.replace("Abraham-", "").replace("oe", "ö")}`;
					} catch (error) {
						page.innerHTML = "TITEL S. 1";
					}

					const arrow = document.createElement("span");
					arrow.style.marginLeft = "1em";
					arrow.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"/>
                                    </svg>`;

					issue.appendChild(page);
					issue.appendChild(arrow);

					hitItem.appendChild(issue);

					hitsBox!.appendChild(hitItem);
					count++;

					if (screeWidth) {
						hitItem.addEventListener("click", () => {
							let active = document.querySelectorAll(".kwic.active");
							active.forEach((element) => {
								element.classList.remove("active");
							});
							hitItem.classList.toggle("active");
							console.log(line);
							let attr = line.kwic_attr?.split("/");
							attr!.shift();
							let attr_length = attr!.length / 11;
							let pdIdx = 9;
							let pdNdx = 10;
							if (attr_length > 1) {
								for (let i = 1; i < attr_length; i++) {
									if (attr![pdIdx] !== "" && attr![pdNdx] !== "") {
										pdIdx += 0;
										pdNdx += 0;
									} else {
										pdIdx += 11;
										pdNdx += 11;
									}
								}
							}
							let pdId = attr![pdIdx];
							let pdN = attr![pdNdx];
							let hash = hitId.split("__")[2];
							loadContent(pdId, "noske-synoptic-view", hash, pdN);
						});
					}
				}

				const issuesBox = document.createElement("div");
				issuesBox.classList.add("mt-4", "text-gray-600", "text-left");
				issuesBox.innerHTML = `<h4 class="text-lg">Anzahl der Treffer pro Ausgabe:</h4>`;
				issuesBox.innerHTML += `<ul class="pl-4">`;
				for (const [key, value] of Object.entries(issues)) {
					let title = key.replaceAll("_", " ").replace("Abraham-", "").replace("oe", "ö");
					issuesBox.innerHTML += `<li class="text-red-600 cursor-pointer list-none" data-key="${key == "Alle" ? ".*" : key}">${value} – ${title}</li>`;
				}

				hitsBox!.prepend(issuesBox);

				issuesBox.addEventListener("click", (e) => {
					// @ts-ignore
					const key = e.target!.dataset.key;
					if (key) {
						let searchInput = document.getElementById("noske-input-input") as HTMLInputElement;
						let searchSelect = document.getElementById("noske-input-select") as HTMLSelectElement;
						if (searchInput.value.includes("within")) {
							if (searchSelect.value !== "cql") {
								searchSelect.value = "cql";
								let searchInputValue = searchInput.value.replace(
									/(.+) within .+/g,
									`"$1" within <doc id="${key}"/>`,
								);
								searchInput.value = searchInputValue;
							} else {
								searchInput.value = searchInput.value.replace(
									/(.+) within .+/g,
									`$1 within <doc id="${key}"/>`,
								);
							}
						} else {
							if (searchSelect.value !== "cql") {
								searchSelect.value = "cql";
								let searchInputValue = searchInput.value.replace(
									/(.+)/g,
									`"$1" within <doc id="${key}"/>`,
								);
								searchInput.value = searchInputValue;
							} else {
								searchInput.value = searchInput.value.replace(
									/(.+)/g,
									`$1 within <doc id="${key}"/>`,
								);
							}
						}
						const searchButton = document.getElementById(
							"noske-search-button",
						) as HTMLButtonElement;
						searchButton.click();
					}
				});
			},
			// customSynopticView: screeWidth
			// 	? (resultLineId: any) => {
			// 			let first_entry: [string, any] = Object.entries(resultLineId)[0];
			// 			if (first_entry) {
			// 				let key = first_entry[0];
			// 				let value = first_entry[1];
			// 				let kwic = document.getElementById(key) as HTMLElement;
			// 				kwic?.classList.add("active");
			// 				let attr = value!.kwic_attr?.split("/");
			// 				let pdId = attr![attr!.length - 2];
			// 				let pdN = attr![attr!.length - 1];
			// 				let hash = key.split("__")[2];
			// 				loadContent(pdId, "noske-synoptic-view", hash, pdN);
			// 			}
			// 			const input = document.querySelector("#noske-input input") as HTMLInputElement;
			// 			input?.addEventListener("input", (e) => {
			// 				// @ts-ignore
			// 				if (e.target?.value === "") {
			// 					let view = document.getElementById("noske-synoptic-view") as HTMLElement;
			// 					view?.parentElement!.classList.toggle("hidden");
			// 					view?.parentElement!.classList.toggle("active");
			// 				}
			// 			});
			// 			Object.entries(resultLineId).forEach(([key, value]) => {
			// 				console.log(key, value);
			// 				let kwic = document.getElementById(key) as HTMLElement;
			// 				kwic?.classList.add("kwic");
			// 				kwic?.addEventListener("click", () => {
			// 					let active = document.querySelectorAll(".kwic.active");
			// 					active.forEach((element) => {
			// 						element.classList.remove("active");
			// 					});
			// 					kwic?.classList.add("active");
			// 					let attr = value!.kwic_attr?.split("/");
			// 					let pdId = attr![attr!.length - 2];
			// 					let pdN = attr![attr!.length - 1];
			// 					let hash = key.split("__")[2];
			// 					// let id = key.split("__")[1];
			// 					loadContent(pdId, "noske-synoptic-view", hash, pdN);
			// 				});
			// 			});
			// 		}
			// 	: undefined,
		},
	});

	const hitExamples = document.querySelectorAll(".hit-examples") as NodeListOf<HTMLElement>;
	Array.from(hitExamples).forEach((item) => {
		item.addEventListener("click", (e) => {
			// @ts-ignore
			const key = e.target!.innerHTML.replace("&amp;", "&");

			if (key) {
				let searchInput = document.getElementById("noske-input-input") as HTMLInputElement;
				let searchSelect = document.getElementById("noske-input-select") as HTMLSelectElement;
				searchSelect.value = "cql";
				searchInput.value = key;
				const searchButton = document.getElementById("noske-search-button") as HTMLButtonElement;
				searchButton.click();
			}
		});
	});

	const wordlist = document.querySelectorAll("#abacus-wordslist ul li") as NodeListOf<HTMLElement>;
	const wordslistHtml = document.querySelector("#abacus-wordslist div") as HTMLDivElement;

	Array.from(wordlist).forEach((element) => {
		element.addEventListener("click", async () => {
			let id = element.id;

			let words = await search.getWordsList({
				corpname: "abacus",
				wlattr: id,
				includeNonwords: 0,
				wlicase: 0,
				wltype: "simple",
				wlmaxitems: 3600,
				wlminfreq: 1,
			});

			if (wordslistHtml.classList.contains("active")) {
				wordslistHtml.innerHTML = "";
			} else {
				wordslistHtml.classList.toggle("hidden");
				wordslistHtml.classList.toggle("active");
			}

			// @ts-ignore
			const wordlist = [...words.Items].filter((item) => item.str !== "");

			wordslistHtml.innerHTML = `<span id="rg-reset" class="cursor-pointer text-gray-500">zurücksetzen</span>`;

			if (id !== "pos") {
				let abc: {
					[key: string]: Array<string>;
				} = {};

				wordlist.map((item) => {
					let firstLetter: string = item.str.charAt(0).toUpperCase();

					pushOrCreate(abc, firstLetter, item);
				});

				for (const [key, value] of Object.entries(abc).sort()) {
					wordslistHtml.innerHTML += `<div id="rg-abc"><h4 class="cursor-pointer">${key}</h4><ul class="hidden pl-2">${value.sort().join("")}</ul></div>`;
				}
			} else {
				let wordTypes: {
					[key: string]: Array<string>;
				} = {};

				wordlist.map((item) => {
					if (item.str.includes("_")) {
						pushOrCreate(wordTypes, "Kontrahierte-Formen-II", item);
					} else if (
						item.str.includes("PPER") ||
						item.str.includes("ARTNN") ||
						item.str.includes("ADVART")
					) {
						if (item.str.startsWith("P")) {
							pushOrCreate(wordTypes, "Pronomen-mit-Klitikon", item);
						} else if (item.str.startsWith("V")) {
							pushOrCreate(wordTypes, "Verb-mit-Klitikon", item);
						} else if (item.str.startsWith("ADV")) {
							pushOrCreate(wordTypes, "Adverb-mit-Klitikon", item);
						} else if (item.str.startsWith("ART")) {
							pushOrCreate(wordTypes, "Nomen-mit-Klitikon", item);
						} else if (item.str.startsWith("KOU")) {
							pushOrCreate(wordTypes, "Konjunktion-mit-Klitikon", item);
						}
					} else {
						pushOrCreate(wordTypes, "Stuttgart-Tübingen-TagSet", item);
					}
				});

				wordslistHtml.innerHTML += `<div id="rg-abc"><h4 class="cursor-pointer">Kontrahierte Formen I</h4><ul class="hidden pl-2" id="rg-abc-types"></ul></div>`;

				for (let [key, value] of Object.entries(wordTypes).sort()) {
					if (key !== "Kontrahierte-Formen-II" && key !== "Stuttgart-Tübingen-TagSet") {
						document.getElementById("rg-abc-types")!.innerHTML +=
							`<h4 class="cursor-pointer">${key.replace("-", " ").replace("-", " ")}</h4><ul class="hidden pl-2">${value.sort().join("")}</ul>`;
					} else {
						if (key !== "Stuttgart-Tübingen-TagSet") {
							key = key.replace("-", " ").replace("-", " ");
						}
						wordslistHtml.innerHTML += `<div id="rg-abc"><h4 class="cursor-pointer">${key}</h4><ul class="hidden pl-2">${value.sort().join("")}</ul></div>`;
					}
				}
			}

			const reset = document.getElementById("rg-reset") as HTMLElement;
			reset.addEventListener("click", () => {
				wordslistHtml.innerHTML = "";
			});

			const wordlistResult = document.querySelectorAll(
				"#abacus-wordslist div ul li",
			) as NodeListOf<HTMLElement>;

			Array.from(wordlistResult).forEach((item) => {
				item.addEventListener("click", (e) => {
					const noskeInput = document.getElementById("noske-input-input") as HTMLInputElement;

					const noskeSelect = document.getElementById("noske-input-select") as HTMLSelectElement;
					noskeSelect.value = "cql";

					// @ts-ignore
					//noskeInput.value = e.target!.textContent;
					noskeInput.value = `[${id}="${e.target!.dataset.str}"]`;
					//noskeInput.dispatchEvent(new Event("", { bubbles: true }));
					const searchButton = document.getElementById("noske-search-button") as HTMLButtonElement;
					searchButton.click();
				});
			});

			const rgAbc = document.querySelectorAll("#rg-abc h4") as NodeListOf<HTMLElement>;

			Array.from(rgAbc).forEach((item) => {
				item.addEventListener("click", (e) => {
					// @ts-ignore
					const ul = e.target!.nextElementSibling as HTMLElement;
					ul.classList.toggle("hidden");
				});
			});
		});
	});

	const pushOrCreate = (obj: any, key: string, item: { str: string; frq: string }) => {
		try {
			obj[key].push(createListItem(item));
		} catch (error) {
			obj[key] = [];

			obj[key].push(createListItem(item));
		}
	};

	const createListItem = (item: { str: string; frq: string }) => {
		return `<li class="cursor-pointer text-red-600" data-str="${item.str}">${item.str} (${item.frq})</li>`;
	};
</script>
