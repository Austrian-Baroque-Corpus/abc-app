---
import { readFile } from "fs/promises";

import EditionFragment from "./EditionFragment.astro";
import VirtualKeyboard from "./VirtualKeyboard.astro";

const html = await readFile("edition/register.html", "utf-8");
---

<div>
	<div class="flex flex-row">
		<div
			class="xs:hidden relative z-0 flex max-h-screen min-h-screen w-10 max-w-[350px] overflow-y-auto border-r border-r-red-600 bg-cabacus bg-repeat-y px-4 pt-10 sm:hidden md:hidden"
		>
			<div id="abacus-register" set:html={html} class="hidden" />
			<div class="flex">
				<button
					id="rg-button"
					class="-ml-11 rotate-90 self-start py-4 align-bottom uppercase tracking-widest"
				>
					Register
				</button>
			</div>
		</div>
		<div
			class="xs:flex-col sticky top-24 flex w-[100%] flex-row sm:flex-col md:flex-col lg:flex-col"
		>
			<div class="w-[100%] p-4 text-center">
				<div
					class="xs:max-w-[200px] mx-auto max-w-[1000px] sm:max-w-[300px] md:max-w-[600px] lg:max-w-[800px]"
				>
					<h4 class="pt-2 font-segoe text-xl">
						<img class="inline" src="/Suche.jpg" alt="Suche" /> in den Abacus Transkripten
					</h4>
					<VirtualKeyboard />
					<div id="noske-search" class="text-center"></div>
					<div class="py-4">
						<h5>Beispiele:</h5>
						<ul>
							<li class="inline px-2">
								<a
									href="search?corpname=abacus&q=q%22Waitzen%3DK%C3%B6rnlein%22&viewmode=kwic&attrs=word%2Clemma%2Cpos%2Cid%2CplaceName%2CpersName%2CpbId&format=json&structs=doc%2Cg&kwicrightctx=100%23&kwicleftctx=100%23&refs=doc.title&pagesize=20&fromp=1&selectQueryValue=url"
									><code>1:"Waitzen=Körnlein"</code></a
								>
							</li>
							<li class="inline px-2">
								<a
									href="search?corpname=abacus&q=q%22arme%22+%22Seelen%22+&viewmode=kwic&attrs=word%2Clemma%2Cpos%2Cid%2CplaceName%2CpersName%2CpbId&format=json&structs=doc%2Cg&kwicrightctx=100%23&kwicleftctx=100%23&refs=doc.title&pagesize=20&fromp=1&selectQueryValue=url"
									><code>2:"arme" "Seelen"</code></a
								>
							</li>
							<li class="inline px-2">
								<a
									href="search?corpname=abacus&q=q%22Seele%22+%7C+%22Fegefeuer%22&viewmode=kwic&attrs=word%2Clemma%2Cpos%2Cid%2CplaceName%2CpersName%2CpbId&format=json&structs=doc%2Cg&kwicrightctx=100%23&kwicleftctx=100%23&refs=doc.title&pagesize=20&fromp=1&selectQueryValue=url"
									><code>3:"Seele | Fegefeuer"</code></a
								>
							</li>
						</ul>
						<ul>
							<li class="inline px-2">
								<a
									href="search?corpname=abacus&q=q%5Blemma%3D%22Fegefeuer%22%5D&viewmode=kwic&attrs=word%2Clemma%2Cpos%2Cid%2CplaceName%2CpersName%2CpbId&format=json&structs=doc%2Cg&kwicrightctx=100%23&kwicleftctx=100%23&refs=doc.title&pagesize=20&fromp=1&selectQueryValue=url"
									><code>4:[lemma="Fegefeuer"]</code></a
								>
							</li>
							<li class="inline px-2">
								<a
									href="search?corpname=abacus&q=q%5Blemma%3D%22ja%22+%26+pos%3D%22PTKANT%22%5D&viewmode=kwic&attrs=word%2Clemma%2Cpos%2Cid%2CplaceName%2CpersName%2CpbId&format=json&structs=doc%2Cg&kwicrightctx=100%23&kwicleftctx=100%23&refs=doc.title&pagesize=20&fromp=1&selectQueryValue=url"
									><code>5:[lemma="ja" &amp; pos="PTKANT"]</code></a
								>
							</li>
							<li class="inline px-2"><a href="nutzung" class="text-red-600 underline">mehr</a></li>
						</ul>
					</div>
				</div>

				<div id="hitsbox"></div>
				<div class="mx-auto grid grid-cols-2">
					<div id="noske-pagination" class="text-right"></div>
					<div id="statsbox" class="text-left"></div>
				</div>
			</div>
			<EditionFragment />
		</div>
	</div>
</div>

<style is:global>
	.bg-abacus-search {
		min-width: 130px;
		background-image: url("/ihr_findet_padded.jpg");
		background-position: center;
		background-size: cover;
		background-repeat: no-repeat;
	}

	.kwic.active {
		border: 2px solid rgb(239 68 68);
		border-radius: 0.25rem;
	}

	.kwic {
		cursor: pointer;
	}
</style>
<script>
	import { loadContent } from "../lib/synopticView";

	const register = document.querySelectorAll<HTMLElement>(".register-menu li");
	[...register].forEach((element) => {
		element.addEventListener("click", () => {
			let id = element.dataset.link;
			let content = document.getElementById(id!);
			content?.classList.toggle("hidden");
		});
	});

	const button = document.getElementById("rg-button");
	button?.addEventListener("click", () => {
		button.classList.toggle("-ml-11");
		let register = document.getElementById("abacus-register") as HTMLElement;
		register.classList.toggle("hidden");
		register.parentElement?.classList.toggle("w-10");
		register.parentElement?.classList.toggle("w-[50%]");
	});

	const range = 5;
	for (let i = 1; i <= range; i++) {
		const content = document.querySelectorAll<HTMLElement>(`#rg-${i} div ul li`);
		if (content) {
			content.forEach((element) => {
				element.addEventListener("click", async () => {
					let id = element.dataset.link;
					loadContent(id!, "noske-synoptic-view", "");
				});
			});
		}
	}
</script>
<script>
	import { NoskeSearch } from "acdh-noske-search";
	import { loadContent } from "../lib/synopticView";

	const screeWidth = window.innerWidth > 1199 ? true : false;

	const search = new NoskeSearch({
		container: "noske-search",
		autocomplete: true,
		wordlistattr: ["word", "lemma", "pos", "id", "placeName", "persName", "pbId"],
	});

	search.minQueryLength = 2;

	search.search({
		debug: false,
		client: {
			//base: "http://localhost:8080",
			base: "https://abacus-noske.acdh-dev.oeaw.ac.at",
			corpname: "abacus",
			attrs: "word,lemma,pos,id,placeName,persName,pbId",
			structs: "doc,g",
			refs: "doc.title",
		},
		hits: {
			id: "hitsbox",
			css: {
				div: "grid grid-cols-2 gap-2 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-1 xs:grid-cols-1",
				table: "table-auto",
				kwic: "text-red-500 text-lg",
				trHead: "bg-gray-200",
			},
		},
		searchInput: {
			id: "noske-input",
			placeholder: "Tippe zumindest zwei Zeichen um Wortvorschläge zu erhalten...",
			button: "Suchen",
			css: {
				button: "text-xl bg-abacus-search text-transparent shadow-lg border border-gray-300 ",
			},
		},
		pagination: {
			id: "noske-pagination",
			css: {
				select: "rounded-lg text-xl p-2",
			},
		},
		stats: {
			id: "statsbox",
			label: "Ergebnisse:",
			css: {
				label: "text-lg text-gray-600 pt-2",
			},
		},
		autocompleteOptions: {
			id: "noske-autocomplete",
			css: {
				div: "bg-white border border-gray-300 absolute ml-[145px] mt-10 text-left overflow-y-scroll overflow-x-hidden max-h-[400px]",
				ul: "p-0",
				li: "p-2 hover:bg-gray-100 text-sm text-gray-500 hover:cursor-pointer",
				loader:
					"m-2 border-4 border-gray-300 border-t-4 border-t-black rounded-full relative w-[40px] h-[40px] text-center",
			},
		},
		config: {
			tableView: false,
			customUrlTransform: screeWidth
				? undefined
				: (lines) => {
						let kwic_attr = lines.kwic_attr?.split("/")[1];
						let pageId = lines.kwic_attr?.split("/")[6];
						// let refs = lines.refs;
						// let docID = refs[0].split("=")[1];
						let url = new URL("https://abacus.acdh-ch-dev.oeaw.ac.at/edition/" + pageId);
						url.hash = kwic_attr!;
						url.searchParams.set("img", "on");
						url.searchParams.set("place", "on");
						return url;
					},
			customSynopticView: screeWidth
				? (resultLineId) => {
						let first_entry = Object.entries(resultLineId)[0];
						if (first_entry) {
							let key = first_entry[0];
							let value = first_entry[1];
							let kwic = document.getElementById(key) as HTMLElement;
							kwic?.classList.add("active");
							let attr = value.kwic_attr?.split("/");
							let pdId = attr![attr!.length - 1];
							let hash = key.split("__")[2];
							loadContent(pdId, "noske-synoptic-view", hash);
						}
						const input = document.querySelector("#noske-input input") as HTMLInputElement;
						input?.addEventListener("input", (e) => {
							// @ts-ignore
							if (e.target?.value === "") {
								let view = document.getElementById("noske-synoptic-view") as HTMLElement;
								view?.parentElement!.classList.toggle("hidden");
								view?.parentElement!.classList.toggle("active");
							}
						});
						Object.entries(resultLineId).forEach(([key, value]) => {
							let kwic = document.getElementById(key) as HTMLElement;
							kwic?.classList.add("kwic");
							kwic?.addEventListener("click", () => {
								let active = document.querySelectorAll(".kwic.active");
								active.forEach((element) => {
									element.classList.remove("active");
								});
								kwic?.classList.add("active");
								let attr = value.kwic_attr?.split("/");
								let pdId = attr![attr!.length - 1];
								let hash = key.split("__")[2];
								// let id = key.split("__")[1];
								loadContent(pdId, "noske-synoptic-view", hash);
							});
						});
					}
				: undefined,
		},
	});
</script>
