---
import { readFile } from "fs/promises";

import { createBaseurl } from "../lib/baseurl.ts";

const html = await readFile("edition/register.html", "utf-8");
---

<div
	class="xs:hidden relative z-0 max-h-screen min-h-screen w-[50%] max-w-[350px] overflow-y-auto border-r border-r-red-600 bg-cabacus bg-repeat-y px-4 pt-10 sm:hidden md:hidden"
>
	<div id="abacus-wordslist" class="my-2">
		<ul>
			<li class="cursor-pointer text-red-500" id="w">Wortformen</li>
			<li class="cursor-pointer text-red-500" id="l">Lemmata</li>
			<li class="cursor-pointer text-red-500" id="pos">Wortarten</li>
			<li class="cursor-pointer text-red-500" id="persName">Personennamen</li>
			<li class="cursor-pointer text-red-500" id="placeName">Ortsnamen</li>
		</ul>
		<div class="mt-4 hidden"></div>
	</div>

	<div id="abacus-register" set:html={html} class="relative my-4" />
	<div class="absolute top-4">
		<a role="button" id="rg-button"
			><img src={createBaseurl("Register.jpg")} alt="Register" title="Register" /></a
		>
	</div>
</div>
<script>
	import { loadContent } from "../lib/synopticView";

	const register = document.querySelectorAll<HTMLElement>(".register-menu li");

	Array.from(register).forEach((element) => {
		element.addEventListener("click", (e) => {
			// @ts-ignore
			const id = e.target!.dataset.link;

			if (id.startsWith("rg-")) {
				let content = document.getElementById(id!);

				content?.classList.toggle("hidden");
			} else if (id.startsWith("wk-")) {
				let contentElement = document.getElementById("info-" + id.split("-")[1]);
				contentElement?.classList.toggle("hidden");

				// @ts-ignore
				let content = e.target!.dataset.content;
				loadContent(content, "noske-synoptic-view", "", "");
			} else {
				// to be defined
			}
		});
	});

	// Click handler for Person and Place categories in the Register
	const registerPers = document.querySelectorAll<HTMLElement>("#rg-pers h5, #rg-place h5");

	Array.from(registerPers).forEach((element) => {
		element.addEventListener("click", (e) => {
			const target = e.target as HTMLElement;

			// Find the h5 element (whether clicked directly or on a child element)
			const h5Element = target.closest("h5") as HTMLElement;

			if (h5Element) {
				// Find the next UL sibling (skip any span/br elements)
				let nextElement = h5Element.nextElementSibling;
				while (nextElement && nextElement.tagName !== "UL") {
					nextElement = nextElement.nextElementSibling;
				}

				if (nextElement) {
					const ulElement = nextElement as HTMLElement;
					if (ulElement.classList.contains("hidden")) {
						ulElement.classList.remove("hidden");
						ulElement.style.display = "";
						h5Element.style.fontWeight = "bold";
					} else {
						ulElement.classList.add("hidden");
						ulElement.style.display = "none";
						h5Element.style.fontWeight = "normal";
					}
				}
				return;
			}
		});
	});

	const button = document.getElementById("rg-button");

	button?.addEventListener("click", () => {
		button.parentElement!.classList.toggle("rotate-90");
		button.parentElement!.classList.toggle("-left-2");
		//button.parentElement!.classList.toggle("top-45");
		button.parentElement!.classList.toggle("top-4");
		let register = document.getElementById("abacus-register") as HTMLElement;
		register.classList.toggle("hidden");
		register.parentElement?.classList.toggle("w-20");
		register.parentElement?.classList.toggle("w-[50%]");
		let wordslist = document.getElementById("abacus-wordslist") as HTMLElement;
		wordslist.classList.toggle("hidden");
	});

	const range = 5;

	for (let i = 1; i <= range; i++) {
		const content = document.querySelectorAll<HTMLElement>(`#rg-${i} div ul li`);

		if (content) {
			content.forEach((element) => {
				element.addEventListener("click", async () => {
					let id = element.dataset.link;
					loadContent(id!, "noske-synoptic-view", "", "");
				});
			});
		}
	}

	// Populate all spans with class "today" with current date in DD.MM.YYYY format
	const todaySpans = document.querySelectorAll<HTMLSpanElement>("span.today");

	if (todaySpans.length > 0) {
		const now = new Date();
		const day = String(now.getDate()).padStart(2, "0");
		const month = String(now.getMonth() + 1).padStart(2, "0");
		const year = now.getFullYear();
		const formattedDate = `${day}.${month}.${year}`;

		todaySpans.forEach((span) => {
			span.textContent = formattedDate;
		});
	}
</script>
